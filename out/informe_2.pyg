    fn gaussian_elimination(a: &mut Vec<Vec<f64>>, b: &mut Vec<f64>) -> Vec<f64> {
        let n = b.len();

        // Forward Elimination: Transform to upper triangular form
        for i in 0..n {
            // Partial Pivoting: Swap rows if needed
            let mut max_row = i;
            for k in i + 1..n {
                if a[k][i].abs() > a[max_row][i].abs() {
                    max_row = k;
                }
            }

            if a[max_row][i].abs() == 0.0 {
                panic!("Matrix is singular or nearly singular");
            }

            // Swap rows in both A and b
            a.swap(i, max_row);
            b.swap(i, max_row);

            // Eliminate the below rows
            for j in i + 1..n {
                let factor = a[j][i] / a[i][i];
                for k in i..n {
                    a[j][k] -= factor * a[i][k];
                }
                b[j] -= factor * b[i];
            }
        }

        // Back Substitution: Solve the upper triangular system
        let mut x = vec![0.0; n];
        for i in (0..n).rev() {
            x[i] = b[i];
            for j in i + 1..n {
                x[i] -= a[i][j] * x[j];
            }
            x[i] /= a[i][i];
        }

        x
    }

    fn main() {
        // Example usage:
        let mut a = vec![
            vec![2.0, 1.0, -1.0],
            vec![-3.0, -1.0, 2.0],
            vec![-2.0, 1.0, 2.0],
        ];
        let mut b = vec![8.0, -11.0, -3.0];

        let solution = gaussian_elimination(&mut a, &mut b);
        println!("Solution: {:?}", solution);
    }
