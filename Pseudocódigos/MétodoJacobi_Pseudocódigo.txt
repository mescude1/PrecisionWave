FUNCIÓN MétodoJacobi(A, b, x0, tolerancia=1e-10, max_iteraciones=1000):

    ENTRADA:
    - A: matriz de coeficientes (cuadrada y preferiblemente diagonal dominante)
    - b: vector de términos independientes
    - x0: vector inicial de aproximaciones
    - tolerancia: criterio de convergencia (opcional)
    - max_iteraciones: número máximo de iteraciones permitidas (opcional)

    SALIDA:
    - x: vector aproximado de solución
    - iteraciones: número de iteraciones realizadas
    - convergió: indicador de si el método alcanzó la convergencia
    - df_result: tabla de resultados con las iteraciones

    n = TAMAÑO(b)  // Número de ecuaciones (tamaño del sistema)
    x = COPIAR(x0)  // Inicializar vector de soluciones con x0
    x_nuevo = VECTOR_CERO(n)  // Vector auxiliar para los nuevos valores
    lista_resultados = []  // Lista para registrar los resultados de cada iteración

    PARA k DESDE 0 HASTA max_iteraciones HACER:
        PARA i DESDE 0 HASTA n-1 HACER:
            s = SUMA(A[i][j] * x[j] PARA j DESDE 0 HASTA n-1 SI j ≠ i)  // Suma de términos excepto el diagonal
            x_nuevo[i] = (b[i] - s) / A[i][i]  // Calcular el nuevo valor para x[i]

        // Verificar convergencia
        error = NORMA_INFINITA(x_nuevo - x)
        resultado = { 'iteración': k, 'x': COPIAR(x_nuevo), 'error': error }
        lista_resultados.AGREGAR(resultado)

        SI error < tolerancia ENTONCES:
            Crear un DataFrame con lista_resultados  // Convertir la lista a tabla
            IMPRIMIR el DataFrame  // Mostrar tabla con resultados de iteraciones
            DEVOLVER (x_nuevo, k+1, True, DataFrame)  // Algoritmo ha convergido

        x = COPIAR(x_nuevo)  // Actualizar el vector de solución para la siguiente iteración

    // Si no converge en el número máximo de iteraciones
    Crear un DataFrame con lista_resultados  // Convertir la lista a tabla
    IMPRIMIR el DataFrame  // Mostrar tabla con resultados de iteraciones
    DEVOLVER (x_nuevo, max_iteraciones, False, DataFrame)

FIN FUNCIÓN
